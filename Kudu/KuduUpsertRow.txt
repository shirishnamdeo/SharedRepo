-- https://impala.apache.org/docs/build/html/topics/impala_upsert.html

---------------------------------------------------------------------------------------------------

SYNTAX:


UPSERT [hint_clause] INTO [TABLE] [db_name.]table_name
  [(column_list)]
{
    [hint_clause] select_statement
  | VALUES (value [, value ...]) [, (value [, value ...]) ...]
}

hint_clause ::= [SHUFFLE] | [NOSHUFFLE]
  (Note: the square brackets are part of the syntax.)
The select_statement clause can use the full syntax, such as WHERE and join clauses, as SELECT Statement.


---------------------------------------------------------------------------------------------------


UPSERT Statement:

Acts as a combination of the INSERT and UPDATE statements. For each row processed by the UPSERT statement:
	If another row already exists with the same set of primary key values, the other columns are updated to match the values from the row being "UPSERTed".
	If there is not any row with the same set of primary key values, the row is created, the same as if the INSERT statement was used.


---------------------------------------------------------------------------------------------------

Examples:
UPSERT INTO kudu_table (pk, c1, c2, c3) VALUES (0, 'hello', 50, true), (1, 'world', -1, false);
UPSERT INTO production_table SELECT * FROM staging_table;
UPSERT INTO production_table SELECT * FROM staging_table WHERE c1 IS NOT NULL AND c2 > 0;


-- This below query also update multiple records in target table using selected records from a dataset.
WITH DESC_DATA AS (
   SELECT T1.validation_event_cd, T1.rule_version, T3.rule_requester, T3.rule_business_descr FROM <database>.<table_name>
   INNER JOIN [...]
   WHERE [...]
)
UPSERT INTO TABLE <database>.<table_name> (validation_event_cd, rule_version, rule_requester, rule_business_descr) SELECT DESC_DATA.validation_event_cd, DESC_DATArule_version, DESC_DATA.rule_requester, DESC_DATA.rule_business_descr;


---------------------------------------------------------------------------------------------------

Usage notes:

If you specify a column list, any omitted columns in the inserted or updated rows are set to their default value (if the column has one) 
or NULL (if the column does not have a default value). 
Therefore, if a column is not nullable and has no default value, it must be included in the column list for any UPSERT 
statement. 

Because all primary key columns meet these conditions, all the primary key columns must be specified in every UPSERT 
statement.

Because Kudu tables can efficiently handle small incremental changes, the VALUES clause is more practical to use with 
Kudu tables than with HDFS-based tables.

------------------------------------------------------------------------------------------------------------------------
